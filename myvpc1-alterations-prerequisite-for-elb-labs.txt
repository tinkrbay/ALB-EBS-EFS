ADDITIONAL SUBNETS FOR ELB VIRTUAL INTERFACES

We will create three new subnets (Our ELB's virtual interfaces will be placed in these subnets)

myvpc1-elb-public1a (172.31.101.0/24)., AZ us-east-1a
myvpc1-elb-public1b (172.31.102.0/24)., AZ us-east-1b
myvpc1-elb-public1c (172.31.103.0/24)., AZ us-east-1c

Ensure that the name tags are applied as above to the respective subnets

Next, you will go and enable auto-assignment of public IP addresses for each of these subnets

NEW ROUTING TABLE FOR ELASTIC LOAD BALANCER SUBNETS

create a new routing table for myvpc1 and name tag it as myvpc1-elb
Associate the myvpc1-elb-public1a, myvpc1-elb-public1b & myvpc1-elb-public1c subnets with this routing table
Add a new route 0.0.0.0/0 via IGW in this routing table

ADDING NEW NACL FOR THE ELASTIC LOAD BALANCER SUBNETS

Create a new NACL and name it as myvpc1-elb
Associate the myvpc1-elb-public1a, myvpc1-elb-public1b & myvpc1-elb-public1c subnets with this NACL

Edit the inbound rules and add the below rules
Rule number 100., allow HTTP traffic from 0.0.0.0/0 
Rule number 200., allow HTTPS traffic from 0.0.0.0/0
Rule number 300., allow all traffic from 172.31.0.0/16

Edit the outbound rules and add the below rules
Rule number 100., add custom tcp rule as type & port range as 1024-65535., destination 0.0.0.0/0 with an effect of Allow
Rule number 200., add allow all traffic to 172.31.0.0/16

FINALIZING OUR SECURITY GROUPS TOWARDS TARGET STATE ARCHITECTURES USED FURTHER IN THIS COURSE

Delete test1 security group. We are beyond simple test based scenarios

Create a new security group named elb-frontend (this security group will be used on our Load Balancers)
Add the following inbound rules
HTTP from 0.0.0.0/0
HTTPS from 0.0.0.0/0
Outbound rules will be left with default values to allow all traffic 

Create new security group called as webapps-with-elb-frontend
Add the following inbound rules
HTTP from (select source as the elb-frontend security group)
HTTPS from (seleect source as the elb-frontend security group)
Leave the outbound rule to default permit all

Create new security group called as webapps-without-elb-frontend
Add the following inbound rules
HTTP from 0.0.0.0/0
HTTPS from 0.0.0.0/0
Leave the outbound rule to default permit all

Create new security group called public-ssh-access
Add the following inbound rules
SSH from 0.0.0.0/0
Leave the outbound rule to default permit all

Create new security group called bastion-host
Add the following inbound rules
SSH from 0.0.0.0/0
Leave the outbound rule default permit all

Create a new security group called ssh-access-from-bastion
Add the following inbound rule
SSH from (select source as the security group named bastion-host)
Leave the outbound rule default permit all

Go the EFS volume that we created for the PHP watermark Images directory
Edit the security group associated with the mount targets. 
Delete the test1 security group from the mount-target association
Add webapps-with-elb-frontend & webapps-without-elb-frontend security groups against each mount target of public1a/1b/1c

